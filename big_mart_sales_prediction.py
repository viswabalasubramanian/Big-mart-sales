# -*- coding: utf-8 -*-
"""Big Mart Sales Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrTw_6_yzFdXor7SiTLQYEHimVwceMdb

Importin The Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Data collection & Analysis"""

# loading the dataset from csv file to a pandas DataFrame
big_mart_data = pd.read_csv('/content/Train-Set.csv')

# first 5 rows of the dataframe
big_mart_data.head()

# number of data points and number of Features
big_mart_data.shape

# getting information about the dataset
big_mart_data.info()

"""Categorical Features:
 - ProductID
 - FatContent
 - ProductType
 - OutletID
 - OutletSize
 - LocationType
 - OutletType
"""

# loading the dataset from csv file to a pandas DataFrame
big_mart_data = pd.read_csv('/content/Train-Set.csv')

# checking for missing values
big_mart_data.isnull().sum()

"""Handling Missing Values

Mean--> Average Value

Mode--> Most Repeated Value
"""

# Mean value of "Weight" np.column_stack
big_mart_data['Weight'].mean()

# filling the missing values in "weight" column with "Mean" value
big_mart_data['Weight'].fillna(big_mart_data['Weight'].mean(), inplace=True)

# checking for missing values
big_mart_data.isnull().sum()

"""Replacing the missing values in "OutletSize" with Mode"""

mode_of_Outlet_size = big_mart_data.pivot_table(values='OutletSize', columns='OutletType', aggfunc=(lambda x: x.mode()[0]))

print(mode_of_Outlet_size)

missing_values = big_mart_data['OutletSize'].isnull()

print(missing_values)

# Fill missing OutletSize values based on OutletType mode
big_mart_data.loc[missing_values, 'OutletSize'] = big_mart_data.loc[missing_values,'OutletType'].apply(lambda x: mode_of_Outlet_size.loc['OutletSize', x])

# checking for missing values
big_mart_data.isnull().sum()

"""Data Analysis"""

# Statistical measures about the data
big_mart_data.describe()

"""Numerical Features"""

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

# Weight distribution
plt.figure(figsize=(6,6))
sns.distplot(big_mart_data['Weight'])
plt.show()

# ProductVisibility distribution
plt.figure(figsize=(6,6))
sns.distplot(big_mart_data['ProductVisibility'])
plt.show()

# MRP distribution
plt.figure(figsize=(6,6))
sns.distplot(big_mart_data['MRP'])
plt.show()

# OutletSales distribution
plt.figure(figsize=(6,6))
sns.distplot(big_mart_data['OutletSales'])
plt.show()

# EstablishmentYear distribution column
plt.figure(figsize=(6,6))
sns.countplot(x='EstablishmentYear', data= big_mart_data)
plt.show()

"""Categorical Features"""

# FatContent  column
plt.figure(figsize=(6,6))
sns.countplot(x='FatContent', data= big_mart_data)
plt.show()

# ProductType  column
plt.figure(figsize=(30,6))
sns.countplot(x='ProductType', data= big_mart_data)
plt.show()

# OutletSize column
plt.figure(figsize=(6,6))
sns.countplot(x='OutletSize', data= big_mart_data)
plt.show()

"""Data pre-processing"""



big_mart_data.head()

big_mart_data['FatContent'].value_counts()

big_mart_data.replace({'FatContent': {'Low Fat':'low fat','LF':'Low Fat','reg':'Regular'}}, inplace=True)

big_mart_data['FatContent'].value_counts()

"""Label Encoding"""

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()

big_mart_data['ProductID'] = encoder.fit_transform(big_mart_data['ProductID'])

big_mart_data['FatContent'] = encoder.fit_transform(big_mart_data['FatContent'])

big_mart_data['ProductType'] = encoder.fit_transform(big_mart_data['ProductType'])

big_mart_data['OutletID'] = encoder.fit_transform(big_mart_data['OutletID'])

big_mart_data['OutletSize'] = encoder.fit_transform(big_mart_data['OutletSize'])

big_mart_data['LocationType'] = encoder.fit_transform(big_mart_data['LocationType'])

big_mart_data['OutletType'] = encoder.fit_transform(big_mart_data['OutletType'])

big_mart_data.head()

"""Splitting features and Targets"""

x = big_mart_data.drop(columns='OutletSales', axis=1)
y = big_mart_data['OutletSales']

print(x)

print(y)

"""Splitting data into Training data & Testing Data"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Machine learning Model Training

XGBoost Regressor



"""

from xgboost import XGBRegressor
regressor = XGBRegressor()

regressor.fit(x_train, y_train)

# prediction on training data
training_data_prediction = regressor.predict(x_train)

# R squared value
from sklearn import metrics
r2_train = metrics.r2_score(y_train, training_data_prediction)

print('R Squared value = ', r2_train)

# prediction on test data
test_data_prediction = regressor.predict(x_test)

#r squared value
r2_test = metrics.r2_score(y_test, test_data_prediction)

print('R Squared value = ', r2_test)

